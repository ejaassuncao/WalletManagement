@using System.Collections.Generic;
@using Domain.Core.Dto;
@using Domain.Core.Model.Enumerables;
@using Domain.Models.Dto;
@using Domain.Models.Extension;
@using Presentation.Blazor.Component;
@using System.Globalization;
@using Presentation.Blazor.Configuration;
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime;
@inject HttpClient Http;
@inject IStringLocalizer<Messages> Loc;

@page "/assertmanager"
<PageTitle>@Title</PageTitle>

<div class="row">
    <div class="col-12">
        <div class="table-title">
            <div class="row">
                <div class="col-xs-6 col-sm-6">
                    <h2>@Title</h2>
                </div>
                <div class="col-xs-6 col-sm-6">
                    <a data-bs-toggle="modal" @onclick="OnNewOrder" data-bs-target="#addActive" class="btn btn-success"><i class="fa fa-plus-circle" aria-hidden="true"></i><span>@Loc["New"]</span></a>
                    <a class="btn btn-primary" @onclick="Search"><i class="fa fa-search" aria-hidden="true"></i><span>@Loc["Search"]</span></a>
                </div>
            </div>
        </div>
    </div>
</div>

<TableComponent HeaderColumns="Category, Sector, Ticker, Price, Amount, Cost, Total Price, Total Cost, L/P, - "
                DataBind="actives"
                Context="active"
                Loading=@loading
                MessageError="@MessageError"
                MessageEmpty="@Messages.Not_found"
                MessageLoading="@Messages.Loading">
    <RowTemplate>
        <td>@active.Category</td>
        <td>@active.Sector</td>
        <td>@active.Ticker</td>
        <td>@active.Price.ToCurrency()</td>
        <td>@active.Amount.ToQuantity()</td>
        <td>@active.UnitCost.ToCurrency()</td>
        <td>@active.TotalPrice.ToCurrency()</td>
        <td>@active.TotalCost.ToCurrency()</td>
        <td>@active.LP.ToCurrency()</td>
        <td>
            <a href="#addActive?Edit" class="new" data-toggle="modal"><i class="fa-solid fa-plus"></i></a>
        </td>
    </RowTemplate>
</TableComponent>

<ModalComponent Id="addActive" Title="Insert Assets">
    <BodyTemplate>
        <form class="row g-12">
            <div class="col-md-12">
                <RadzenSelectBar @bind-Value=ActiveDto.Operation>
                    <Items>
                        <RadzenSelectBarItem Text="Buy" Value=EnumOperationWallet.BUY Icon="shopping_cart" />
                        <RadzenSelectBarItem Text="Sell" Value=EnumOperationWallet.SELL Icon="sell" />
                    </Items>
                </RadzenSelectBar>
            </div>          
            <div class="col-md-12">
                <RadzenAutoComplete Name="txtTicker"
                                    @bind-Value=ActiveDto.Ticker
                                    LoadData=@LoadTickers
                                    Data=@activesDescription
                                    TextProperty="Name"                                 
                                    MinLength="3"
                                    Placeholder="Select a Active..."
                                    Style="width:100%">
                    <Template>
                        @context.Name - @context.Description
                    </Template>
                </RadzenAutoComplete>
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Date" />
                <RadzenDatePicker Name="txtDate" @bind-Value=ActiveDto.Date DateFormat="dd/MM/yyyy" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Amount" />
                <RadzenNumeric Name="TxtAmount" @bind-Value=ActiveDto.Amount TextAlign="TextAlign.Right" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Price" />
                <RadzenNumeric Name="txtUnitCost" TValue="decimal" Format="c" @bind-Value=ActiveDto.UnitCost />
            </div>
        </form>
    </BodyTemplate>
    <FooterTemplate>
        <div class="row">
            <div class="input-group">
                <RadzenButton Icon="save" BusyText="Saving ..." IsBusy=@busy Click=@OnSave Text="Save" ButtonStyle="ButtonStyle.Primary" />
                <RadzenButton Click=@(args => OnNewOrder()) Text="Nova" ButtonStyle="ButtonStyle.Secondary" />
                <RadzenButton data-bs-dismiss="modal" Text="Close" ButtonStyle="ButtonStyle.Light" />
            </div>
        </div>
    </FooterTemplate>
</ModalComponent>

@code {

    #region Default
    private const string Title = "Asset Management";
    private bool loading;
    private string MessageError = string.Empty;
    private bool busy;
    #endregion

    private List<PortifolioDto> actives = new List<PortifolioDto>();
    private List<ItemList> activesDescription = new List<ItemList>();
    private ActiveDto ActiveDto = new ActiveDto();

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    public async Task Search()
    {
        loading = true;
        try
        {
            actives = await Http.GetFromJsonAsync<List<PortifolioDto>>(HelperEndPoints.Api("Portifolios"));
        }
        catch (Exception exp)
        {
            MessageError = exp.Message;
        }
        finally
        {
            loading = false;
        }
    }

    public async Task LoadTickers(LoadDataArgs args)
    {
        try
        {
            var filtro = args.Filter;
            activesDescription = await Http.GetFromJsonAsync<List<ItemList>>(HelperEndPoints.Api($"Portifolios/GetActive?ticker={filtro}"));
        }
        catch (Exception exp)
        {
            MessageError = exp.Message;
        }
    }

    private async Task OnSave()
    {
        busy = true;
        try
        {
            var result = await Http.PostAsJsonAsync(HelperEndPoints.Api("Portifolios"), ActiveDto);
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "sucess", Detail = "Data saved successfully" });
        }
        catch (Exception exp)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = exp.Message, Detail = exp?.InnerException?.Message });
        }
        finally
        {
            busy = false;
        }
    }

    private async void OnNewOrder()
    {
        ActiveDto = new ActiveDto();
        await Focus("txtTicker");
    }

    public async Task Focus(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("focusById", elementId);
    }
}
