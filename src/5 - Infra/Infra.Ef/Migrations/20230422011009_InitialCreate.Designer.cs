// <auto-generated />
using System;
using Infra.Ef.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Ef.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230422011009_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infra.Ef.DataModel.TbActive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("act_id");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("act_category");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cpy_id");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("act_price");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("act_ticker");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("tb_actives", t =>
                        {
                            t.HasComment("sufix: act");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bb239aa-288c-4c88-be49-44db2e50436e"),
                            Category = 0,
                            CompanyId = new Guid("263952b2-7f75-42b1-ae67-2088b688e4f9"),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5648),
                            Enabled = true,
                            Price = 10.8m,
                            Ticker = "MGLU3",
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        },
                        new
                        {
                            Id = new Guid("861f4f24-c553-40ba-beb0-4179fcb8abc1"),
                            Category = 0,
                            CompanyId = new Guid("9d5a9448-b85a-4dc0-b711-1ba7cf6dc90c"),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5652),
                            Enabled = true,
                            Price = 40.7m,
                            Ticker = "BBAS3",
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbActivesOfCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("aoc_id");

                    b.Property<Guid?>("ActiveId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("act_id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("aoc_amount");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bkr_id");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2")
                        .HasColumnName("aoc_date_operation");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<int>("Operation")
                        .HasColumnType("int")
                        .HasColumnName("aoc_operation");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("aoc_unit_cost");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usu_id");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("wal_Id");

                    b.HasKey("Id");

                    b.HasIndex("ActiveId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("tb_actives_company", t =>
                        {
                            t.HasComment("sufix: aoc");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("390901e8-d086-4430-9762-a35c9a011144"),
                            ActiveId = new Guid("6bb239aa-288c-4c88-be49-44db2e50436e"),
                            Amount = 50,
                            BrokerId = new Guid("d626b523-925e-450c-9b9a-2fa5d9cb4609"),
                            DateOperation = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5678),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5678),
                            Enabled = true,
                            Operation = 1,
                            UnitCost = 22.5m,
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea"),
                            UserId = new Guid("59380a1e-b482-41ef-b81e-713042de4dea"),
                            WalletId = new Guid("9f616cff-2bc5-4349-b179-3767fa4567d3")
                        },
                        new
                        {
                            Id = new Guid("64d1876b-7124-413e-a164-df628ea87c3f"),
                            ActiveId = new Guid("861f4f24-c553-40ba-beb0-4179fcb8abc1"),
                            Amount = 200,
                            BrokerId = new Guid("d626b523-925e-450c-9b9a-2fa5d9cb4609"),
                            DateOperation = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5684),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5685),
                            Enabled = true,
                            Operation = 1,
                            UnitCost = 43.5m,
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea"),
                            UserId = new Guid("59380a1e-b482-41ef-b81e-713042de4dea"),
                            WalletId = new Guid("9f616cff-2bc5-4349-b179-3767fa4567d3")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbBroker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bkr_id");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("bkr_cnpj");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("bkr_corporate_name");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("bkr_fantasy_name");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.HasKey("Id");

                    b.ToTable("tb_broker", t =>
                        {
                            t.HasComment("sufix: bkr");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("d626b523-925e-450c-9b9a-2fa5d9cb4609"),
                            CNPJ = "48.537.525/0001-01",
                            CorporateName = "Itau",
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(4957),
                            Enabled = true,
                            FantasyName = "Itau investimentos",
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cpy_id");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("cpy_cnpj");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("cpy_name");

                    b.Property<Guid?>("SetorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sct_id");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.HasKey("Id");

                    b.HasIndex("SetorId");

                    b.ToTable("tb_company", t =>
                        {
                            t.HasComment("sufix: cpy");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("263952b2-7f75-42b1-ae67-2088b688e4f9"),
                            CNPJ = "48.537.555/0001-01",
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5599),
                            Enabled = true,
                            Name = "Magazine Luiza",
                            SetorId = new Guid("e07d8a92-dede-43ec-ad4b-e5e8c584b485"),
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        },
                        new
                        {
                            Id = new Guid("9d5a9448-b85a-4dc0-b711-1ba7cf6dc90c"),
                            CNPJ = "48.537.523/0001-01",
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(5609),
                            Enabled = true,
                            Name = "Banco do Brasil",
                            SetorId = new Guid("2f4f26f3-edc1-4d0b-98eb-954bba05867a"),
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbSector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sct_id");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("sct_name");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.HasKey("Id");

                    b.ToTable("tb_sector", t =>
                        {
                            t.HasComment("sufix: sct");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("e07d8a92-dede-43ec-ad4b-e5e8c584b485"),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(4918),
                            Enabled = true,
                            Name = "Varejo",
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        },
                        new
                        {
                            Id = new Guid("2f4f26f3-edc1-4d0b-98eb-954bba05867a"),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(4921),
                            Enabled = true,
                            Name = "Financeiro",
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usu_id");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("usu_login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("usu_password");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.HasKey("Id");

                    b.ToTable("tb_user", t =>
                        {
                            t.HasComment("sufix: usu");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("59380a1e-b482-41ef-b81e-713042de4dea"),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(4663),
                            Enabled = true,
                            Login = "elton",
                            Password = "123456",
                            UserCreated = new Guid("59380a1e-b482-41ef-b81e-713042de4dea")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("wal_Id");

                    b.Property<Guid?>("BrokerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bkr_id");

                    b.Property<DateTime>("Dcreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("d_created");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("wal_name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usu_id");

                    b.Property<Guid>("UserCreated")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_created");

                    b.Property<Guid?>("UserLastUpdate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_last_update");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("tb_wallet", t =>
                        {
                            t.HasComment("sufix: wal");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f616cff-2bc5-4349-b179-3767fa4567d3"),
                            BrokerId = new Guid("d626b523-925e-450c-9b9a-2fa5d9cb4609"),
                            Dcreated = new DateTime(2023, 4, 21, 22, 10, 9, 253, DateTimeKind.Local).AddTicks(4974),
                            Enabled = true,
                            Name = "Minha Carteira",
                            OwnerId = new Guid("59380a1e-b482-41ef-b81e-713042de4dea"),
                            UserCreated = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbActive", b =>
                {
                    b.HasOne("Infra.Ef.DataModel.TbCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbActivesOfCompany", b =>
                {
                    b.HasOne("Infra.Ef.DataModel.TbActive", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveId");

                    b.HasOne("Infra.Ef.DataModel.TbBroker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId");

                    b.HasOne("Infra.Ef.DataModel.TbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Infra.Ef.DataModel.TbWallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Active");

                    b.Navigation("Broker");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbCompany", b =>
                {
                    b.HasOne("Infra.Ef.DataModel.TbSector", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("Infra.Ef.DataModel.TbWallet", b =>
                {
                    b.HasOne("Infra.Ef.DataModel.TbBroker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId");

                    b.HasOne("Infra.Ef.DataModel.TbUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Broker");

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
